MAIN.PY COMMENTS:

#Rename generator.py to runner.py?

"""
from generator.runner import run_generator

if __name__ == "__main__":
    run_generator()
"""

#POST-FIRST STORY PLANNING:
#Potential features to include in the future
    #Basic GUI? rather than pure CLI?
        #libraries exist for this? chatgpt suggests Tkinter, PyQt, or Kivy for visual interfaces
    #Run a mongo shell program directly interacting with the cluster?
    #Give the user the ability to create shell versions of new files with certain names?
        #allow them to start doing command line editing and saving of the files to get started?
    #Give the user the ability to write new lists within the program?
        #name the list, what type it is, and all the needed lines and such and rest will create it?
    #Create new functions/files that allow for customizable reports to be made, that we can title ourselves?
        #set platform filters, what types of ranking criteria, developer filters, title filters, etc.
        #allow more than just basic txt files? give other options that allow for more graphic/organize customization?
    #Create new file that only generates all the files locally and doesn't bother with mongodb?
        #Make sure altgenerator can fill in the gaps to the cluster when this is done? Without duplicates?
    #allow the user to write down ideas of potential new features to add in the future
        #have these automatically logged to a persistent file that keeps track across sessions
        #when writing it just appends to the already existing file
        #can be reviewed later, lines removed if felt they aren't worth concern
    #give options to change what database format using? provide support for more than mongodb? option to switch?
    #make a txt file that branches games into family groupings?
    #spin IGDB generation into its own file?
    #chatgpt: try to figure out web scraping to extract data from websites?
        #review the data afterwards to see how useful it was, give a check to original source to make sure fits my standards?
    #chatgpt: consider what other user-friendly options and interactive features I could add?
    #chatgpt: do data analysis and visualization on the data once I have it? generate visual/interactive reports/programs?
        #chatgpt: try to identify trends and patterns, in ratings over time or across genres?
        #create charts or graphs to represent aggregated scores/rankings?
        #chatgpt: "Implement statistical analysis to find correlations between different factors such as genre, platform, or release year and game ratings."
    #chatgpt: allow users to customize aggregation process
        #chatgpt: specify which sources to include, weighting scores differently, filtering games off criteria
        #chatgpt: "Implement settings to control how the data is displayed and analyzed, such as sorting options or filtering by platform or release date."
    #chatgpt: use database to enable more complex queries
        #chatgpt: "Implement functionality to update the database with new game releases and ratings automatically."
    #recommendation system
        #chatgpt: "Develop a recommendation engine that suggests games based on user preferences and aggregated scores."
        #this would require a system that tracks users and their history of preferences, which seems like a real interesting way to go
        #could try to integrate with services like glitchwave and backloggd to see what a user's preferences are to try to have a recommendation algorithm?
        #or just have my own databases to track users and their ratings of games?
        #chatgpt: "Utilize machine learning techniques to improve the accuracy of recommendations over time."
    #community features
        #chatgpt: "Add social features like user profiles, comments, and sharing capabilities to allow users to discuss and recommend games within the application."
        #chatgpt: "Implement user ratings and reviews to complement aggregated scores from professional sources."
        #another approach I wasn't really considering, that definitely pushes it more public oriented
        #I guess that means I would have a mass aggregation service that establishes its definitive rankings
        #but users could have recommendations from a mix of their tastes and the "official" tastes?
        #maybe allow users to try to enter their own lists? have a process that qualifies what they submit? allow them to submit from other sources?
        #maybe have a public facing version that cleans things up more generally
        #and my private facing version that aggregates based on the way I do things
        #might have to introduce more significant weighting options at some point if I go along this road
    #localization and internationalization
        #chatgpt: "Support multiple languages by implementing localization features."
        #chatgpt: "Integrate data from international sources to provide a more diverse range of game ratings and reviews."
        #I guess provide some support in the background that could pull different text for different languages?
        #But I def think I should prioritize international sources of data (should try to push that in tracking more)
    #Error Handling and Logging:
        #chatgpt: "Improve error handling to provide informative error messages and gracefully handle unexpected situations."
        #chatgpt: "Implement logging to track program activities and debug issues more effectively."
        #not sure if things are at the level where there are much errors to handle yet
        #will have to keep in mind as it gets more advanced and robust
    #Performance Optimization:
        #chatgpt: "Profile the application to identify performance bottlenecks and optimize critical sections of the code."
        #chatgpt: "Implement caching mechanisms to reduce the need for repeated data retrieval and processing."
        #might be worth analyzing with tools, and looking for redundancies
        #though I think for now that might not be something that could help too much, not until it gets more advanced
    #SEE IF CAN GET OTHER USEFUL IDEAS/BRAINSTORMS FROM CHATGPT?

-----------------------------------

GENERATOR.PY comments:

#LOOK INTO PANDAS FOR DEALING WITH TABULAR DATA IN PYTHON

#Store a version of the games database externally so we can refer to it rather than keep having to override it each time?
#Unless we pick a manual option to clear it? option to just update scores based on new lists?
#check to see if already in database before we bother to get info
#Have different phases of external database?
#First phase would be purely the names we grab from lists
#Second phase would be after IGDB information put into it
#we send off the second phase info to mongo, maybe give option just to do only that off of what we already have
#then we pull the mongo info in to a real listed sortable form

	#START FLESHING OUT GLITCHWAVE USAGE
        #FILL OUT RATINGS, COLLECTION, PLAYTHROUGHS, ETC.
        #IMPORT REVIEWS
        #START LOOKING AT GENRE (INFLUENCE?), YEAR, PLATFORM, ETC. CHARTS
    #SEE IF BACKLOGGD CHARTS COMPARE, IF CAN DO SIMILAR THINGS TO GLITCHWAVE (ALSO LOOK INTO GROUVEE?)

    #ONCE CLEARED ALL OF AN UP TO LIST, THEN CONSIDER EXPANDING THE RANGE (LIKE FROM UP TO 100 TO UP TO 150)
        #consider storing a constantly updated average score?

#add ability to put comments in text files? ex. jackbox party pack quintpack is actually jackbox party pack 1-6
